name: Maintenance Branch Checker

on:
  schedule:
    - cron: "0 9 * * MON" # jeden Montag 09:00 UTC
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Maintenance branch to check'
        required: false
        default: ''
      base_branch:
        description: 'Base branch to compare against'
        required: false
        default: 'main'
      create_issue:
        description: 'Create an issue if changes are found?'
        required: false
        default: 'true'

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Set parameters based on trigger
        id: set-params
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "TARGET_BRANCH=maintenance-release-3" >> $GITHUB_ENV
            echo "BASE_BRANCH=main" >> $GITHUB_ENV
            echo "CREATE_ISSUE=true" >> $GITHUB_ENV
            echo "TRIGGER=cron" >> $GITHUB_ENV
          else
            echo "TARGET_BRANCH=${{ github.event.inputs.target_branch || 'maintenance-release-3' }}" >> $GITHUB_ENV
            echo "BASE_BRANCH=${{ github.event.inputs.base_branch || 'main' }}" >> $GITHUB_ENV
            echo "CREATE_ISSUE=${{ github.event.inputs.create_issue || 'true' }}" >> $GITHUB_ENV
            echo "TRIGGER=manual" >> $GITHUB_ENV
          fi

      - name: Show parameters
        run: |
          echo "Trigger: $TRIGGER"
          echo "Target branch: $TARGET_BRANCH"
          echo "Base branch: $BASE_BRANCH"
          echo "Create issue: $CREATE_ISSUE"

      - name: Run maintenance branch check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          git fetch origin "$TARGET_BRANCH" "$BASE_BRANCH"
          COMMITS=$(git log origin/"$BASE_BRANCH"..origin/"$TARGET_BRANCH" --oneline)

          if [[ -z "$COMMITS" ]]; then
              echo "‚úÖ No new commits in '$TARGET_BRANCH' missing from '$BASE_BRANCH'."
              exit 0
          fi

          echo "‚ö†Ô∏è Found commits in '$TARGET_BRANCH' not in '$BASE_BRANCH':"
          echo "$COMMITS"

          if [[ "$CREATE_ISSUE" == "true" ]]; then
              echo "üì¨ Creating GitHub Issue..."
              TITLE="üö® Unmerged commits from $TARGET_BRANCH into $BASE_BRANCH"
              BODY="The branch \`$TARGET_BRANCH\` contains commits that are not yet in \`$BASE_BRANCH\`.

              Commits:
              \`\`\`
              $COMMITS
              \`\`\`

          Please check if a merge is needed."

              # Ensure label exists
              if ! gh label list --limit 100 | grep -q '^maintenance-check'; then
                  echo "üè∑Ô∏è Creating missing label: maintenance-check"
                  gh label create maintenance-check --color F9D0C4 --description "Created by maintenance-check-action"
              fi

              gh issue create \
                --title "$TITLE" \
                --body "$BODY" \
                --label "maintenance-check" \
                --repo "$GITHUB_REPOSITORY"
          else
              echo "‚ÑπÔ∏è Skipping issue creation."
          fi
