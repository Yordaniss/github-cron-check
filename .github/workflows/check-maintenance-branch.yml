name: Maintenance Branch Checker

on:
  schedule:
    - cron: "0 9 * * MON" # jeden Montag um 09:00 UTC
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Maintenance branch to check (leave empty for latest)'
        required: false
        default: ''
      base_branch:
        description: 'Base branch to compare against'
        required: false
        default: 'main'
      create_issue:
        description: 'Create an issue if changes are found?'
        required: false
        default: 'true'

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Determine branches and check for differences
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          BASE_BRANCH="${{ github.event.inputs.base_branch || 'main' }}"
          CREATE_ISSUE="${{ github.event.inputs.create_issue || 'true' }}"

          # Repo klonen
          git clone --quiet "https://github.com/${{ github.repository }}" repo
          cd repo

          git fetch --all

          if [[ "${{ github.event_name }}" == "schedule" && -z "${{ github.event.inputs.target_branch }}" ]]; then
            # Alle maintenance-release-* Branches finden
            BRANCHES=$(git branch -r | grep 'origin/maintenance-release-' | sed 's|origin/||')

            if [ -z "$BRANCHES" ]; then
              echo "‚ùå Kein Maintenance-Release-Branch gefunden."
              exit 0
            fi

            # H√∂chsten Release ermitteln
            TARGET_BRANCH=$(echo "$BRANCHES" | sed -E 's/.*release-([0-9]+)/\1 \0/' | sort -n | tail -1 | awk '{print $2}')
          else
            TARGET_BRANCH="${{ github.event.inputs.target_branch }}"
          fi

          echo "üîÅ Comparing '$TARGET_BRANCH' against '$BASE_BRANCH'"

          git fetch origin "$BASE_BRANCH"
          git fetch origin "$TARGET_BRANCH"

          COMMITS=$(git log origin/"$BASE_BRANCH"..origin/"$TARGET_BRANCH" --oneline)

          if [[ -z "$COMMITS" ]]; then
              echo "‚úÖ No new commits in '$TARGET_BRANCH' missing from '$BASE_BRANCH'."
              exit 0
          fi

          echo "‚ö†Ô∏è Found commits:"
          echo "$COMMITS"

          if [[ "$CREATE_ISSUE" == "true" ]]; then
              TITLE="üö® Unmerged commits from $TARGET_BRANCH into $BASE_BRANCH"
              BODY="The branch \`$TARGET_BRANCH\` contains commits not in \`$BASE_BRANCH\`:

          \`\`\`
          $COMMITS
          \`\`\`

          Please check if a merge is needed."

              if ! gh label list --limit 100 | grep -q '^maintenance-check'; then
                  gh label create maintenance-check --color F9D0C4 --description "Created by maintenance-check-action"
              fi

              gh issue create \
                --title "$TITLE" \
                --body "$BODY" \
                --label "maintenance-check" \
                --repo "$GITHUB_REPOSITORY"
          else
              echo "‚ÑπÔ∏è Skipping issue creation."
          fi
